<div id="shopifyAlertModal" class="modal-overlay">
  <div class="alert-modal-content">
    <button id="closeModalBtn" class="close-btn">&times;</button>
    <h2 id="alertTitle"></h2>
    <p id="alertDescription"></p>
    <label for="dontShowAgain">
      <input type="checkbox" id="dontShowAgain" /> Don't show this again
    </label>
    <div class="alert-modal-actions">
      <button id="alertSecondaryBtn" class="secondary-btn">Cancel</button>
      <button id="alertPrimaryBtn" class="primary-btn">OK</button>
    </div>
  </div>
</div>

<style>
  :root {
    --title-text-color: {{ block.settings.title_text_color }};
    --description-text-color: {{ block.settings.description_text_color }};
    --primary-button-color: {{ block.settings.primary_button_color }};
    --secondary-button-color: {{ block.settings.secondary_button_color }};
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    handleShopifyAlertModals();
  });

  function handleShopifyAlertModals() {
    console.log("🔄 Poppy is Running");

    const currentProduct = {{ product |  json}};
    const currentCollections = {{ product.collections |  json}};
    console.log(currentProduct)
    const currentUser = "{{ customer }}";
    const country = "{{ localization.country.iso_code }}";
    const modal = document.getElementById('shopifyAlertModal');
    const primaryBtn = document.getElementById('alertPrimaryBtn');
    const secondaryBtn = document.getElementById('alertSecondaryBtn');
    const dontShowAgain = document.getElementById('dontShowAgain');
    const closeBtn = document.getElementById('closeModalBtn');

    if (!modal || !closeBtn) {
      console.debug("⚠️ Modal or close button not found.");
      return;
    }

    const allMetaobjects = [];
    {% for metaobject in metaobjects['alertium-by-konain-bhai'].values %}
      {% if metaobject.alertStatus == "Active" %}
        allMetaobjects.push({{ metaobject | json }});
      {% endif %}
    {% endfor %}

    console.log("🟡 Loaded Active Metaobjects:", allMetaobjects);

    // Loop over each active metaobject and attach behavior
    allMetaobjects.forEach(meta => {
      // Country check
      if (meta.countryRestriction === "enable" && !meta.selectedCountries.includes(country)) return;
      // User check
      if (meta.userOnly === "enable" && !currentUser) return;
      // Schedule check
      if (meta.scheduleStatus === "enable") {
        const now = new Date();
        const start = new Date(meta.startDate);
        const end = new Date(meta.endDate);
        if (now < start || now > end) return;
      }

      const showPosition = meta.showPosition;
// Ensure both selectedCollections and currentProduct.collections have comparable IDs
const selectedCollectionIds = (
  Array.isArray(meta.selectedCollections) && meta.selectedCollections.length > 0
) ? meta.selectedCollections.map(collectionGid => {
  return collectionGid.split('/').pop(); // Extract the collection ID from the GID
}) : [];


console.log("selectedCollectionIds:", selectedCollectionIds);

// Evaluate the condition and store it in a single variable
const isProductOrCollectionMatch = (
  (meta.selectBy === "products" && meta.selectedProducts.includes(currentProduct?.id)) ||
  (meta.selectBy === "collections" && Array.isArray(currentCollections) && currentCollections.length > 0 && currentCollections.some(collection => {
    const collectionId = collection.id.toString(); // Convert collection.id to string for comparison
    console.log("Checking Collection Match:", collectionId, selectedCollectionIds);
    return selectedCollectionIds.includes(collectionId); // Compare the IDs
  }))
);

console.log(isProductOrCollectionMatch, "condition");


// Use the result for further actions


      // Attach based on showPosition
      if ( showPosition === "sitewite" || showPosition === "maintainance") {
        displayModal(meta);
      }

      if (showPosition === "closeInthdfhdfhent") {
        window.addEventListener('beforeunload', function (e) {
          e.preventDefault();
          e.returnValue = '';
          displayModal(meta);
        });
      }
      if (showPosition === "closeIntent") {
        window.addEventListener('beforeunload', function (e) {
          e.preventDefault();
          e.returnValue = '';
          displayModal(meta);
        });
      }

      if (showPosition === "addToCart") {
  if (isProductOrCollectionMatch) {
    const addBtn = document.querySelector('[name="add"]');
    if (addBtn) {
      const clone = addBtn.cloneNode(true);
      addBtn.parentNode.replaceChild(clone, addBtn);
      clone.addEventListener('click', function (e) {
        e.preventDefault();
        interceptedAction = "addToCart";
        displayModal(meta);
      });
    }
  }
}

if (showPosition === "productPage") {
  if (isProductOrCollectionMatch) {
  
        displayModal(meta);
 
  }
}
if (showPosition === "buynow") {
  const checkoutSelectors = [
    'button[name="checkout"]',
    'input[name="checkout"]',
    'button[name="direct_checkout"]',
    'button[data-shopify-buy-now-button]',
    '.shopify-payment-button__button'
  ];


if (isProductOrCollectionMatch) {
    // Iterate over checkout selectors and apply the modal logic
    checkoutSelectors.forEach(selector => {
      const btn = document.querySelector(selector);
      if (btn) {
        const clone = btn.cloneNode(true);
        btn.parentNode.replaceChild(clone, btn);
        clone.addEventListener('click', function (e) {
          e.preventDefault();
          interceptedAction = "checkout";
          displayModal(meta); // Display the modal when checkout is intercepted
        });
      }
    });
  }
}

    });

    let interceptedAction = null;

    function displayModal(meta) {
      console.log("📢 Showing modal:", meta.title);
      modal.style.display = "flex";
      document.getElementById('alertTitle').textContent = meta.title || "Notice";
      document.getElementById('alertDescription').textContent = meta.description || "";
      primaryBtn.textContent = meta.primaryText || "OK";
      secondaryBtn.textContent = meta.secondaryText || "Cancel";

      primaryBtn.onclick = () => {
        if (dontShowAgain?.checked) {
          sessionStorage.setItem('poppyAlertDismissed', 'true');
        }
        modal.style.display = "none";
        if (interceptedAction === "addToCart") {
          const form = document.querySelector('form[action^="/cart/add"]');
          if (form) form.submit();
        }
        if (interceptedAction === "checkout") {
          window.location.href = "/checkout";
        }
      };

      secondaryBtn.onclick = () => {
        modal.style.display = "none";
        if (meta.showPosition === "onVisit") {
          window.location.href = "/";
        }
      };
    }
  }
</script>





{% schema %}
{
  "name": "Poppy",
  "target": "body",
  "stylesheet": "styles.css",
  
  "settings": [
    {
      "type": "color",
      "id": "title_text_color",
      "label": "Title Text Color",
      "default": "#007acc"
    },
    {
      "type": "color",
      "id": "description_text_color",
      "label": "Description Text Color",
      "default": "#555555"
    },
    {
      "type": "color",
      "id": "primary_button_color",
      "label": "Primary Button Color",
      "default": "#007acc"
    },
    {
      "type": "color",
      "id": "secondary_button_color",
      "label": "Secondary Button Color",
      "default": "#e0e0e0"
    }
  ]
}
{% endschema %}

