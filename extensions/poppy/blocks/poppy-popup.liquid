<div id="shopifyAlertModal" class="modal-overlay">
  <div class="alert-modal-content">
    <img id="alertImage" src="" alt="Alert Image" style="max-width: 100%; height: auto; display: none;" width="100" height="100"/>
    <h2 id="alertTitle"></h2>
    <p id="alertDescription"></p>
 
    <div class="alert-modal-actions">
      <button id="alertSecondaryBtn" class="secondary-btn">Cancel</button>
      <button id="alertPrimaryBtn" class="primary-btn">OK</button>
    </div>
    <div id="watermark" class="watermark">Powered by <a id="watermark-link" target="_blank" href="https://apps.shopify.com/partners/objects7">Objects</a></div>
  </div>
</div>


<style>
  :root {
    --title-text-color: {{ block.settings.title_text_color }};
    --description-text-color: {{ block.settings.description_text_color }};
    --primary-button-color: {{ block.settings.primary_button_color }};
    --secondary-button-color: {{ block.settings.secondary_button_color }};
    --primary-button-text-color: {{ block.settings.primary_button_text_color }};
--secondary-button-text-color: {{ block.settings.secondary_button_text_color }};
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    handleShopifyAlertModals();
  });

  function handleShopifyAlertModals() {
    console.log("üîÑ Popup and Disclaimer is Running");
    const billingMetaobject = {{ metaobjects['popup-and-disclaimer-billing'].values | json }};
    console.log(billingMetaobject);
      
    const planType = !billingMetaobject ? 'free' : billingMetaobject[0].plan;

console.log(planType);


    const currentProduct = {{ product |  json}};
    const currentCollections = {{ product.collections |  json}};
    console.log(currentProduct)
    const currentUser = "{{ customer }}";
    const country = "{{ localization.country.iso_code }}";
    const modal = document.getElementById('shopifyAlertModal');
    const primaryBtn = document.getElementById('alertPrimaryBtn');
    const secondaryBtn = document.getElementById('alertSecondaryBtn');
    const dontShowAgain = document.getElementById('dontShowAgain');
  const isProductPage = {% if template == 'product' %}true{% else %}false{% endif %};
    let interceptedAction = null;

    if (!modal) {
      console.debug("‚ö†Ô∏è Modal or close button not found.");
      return;
    }

    const allMetaobjects = [];
    {% for metaobject in metaobjects['popup-and-disclaimer-by-objects'].values %}
      {% if metaobject.alertStatus == "Active" %}
        allMetaobjects.push({{ metaobject | json }});
      {% endif %}
    {% endfor %}

    console.log("üü° Loaded Active Metaobjects:", allMetaobjects);
   function addToCartApi() {
let addToCartForm = document.querySelector('form[action$="/cart/add"]');
let formData = new FormData(addToCartForm);

fetch(window.Shopify.routes.root + 'cart/add.js', {
  method: 'POST',
  body: formData
})
.then(response => {
  console.log('‚úÖ Added to cart via AJAX:', response, formData);
  window.location.reload();
})
.catch(error => {
  console.error('‚ùå Error adding to cart:', error);
});

}

    // Loop over each active metaobject and attach behavior
    let maintainanceShown = false;

allMetaobjects.forEach(meta => {
  // Country check
  if (meta.countryRestriction === "enable" && !meta.selectedCountries.includes(country)) return;

  // User check
  if (meta.userOnly === "enable" && !currentUser) return;

  // Schedule check
  if (meta.scheduleStatus === "enable" && planType === "pro") {
    const now = new Date();
    const start = new Date(meta.startDate);
    const end = new Date(meta.endDate);
    if (now < start || now > end) return;
  }

  const showPosition = meta.showPosition;
  const popupImage = meta.popupImage;

  // Ensure both selectedCollections and currentProduct.collections have comparable IDs
  const selectedCollectionIds = (
    Array.isArray(meta.selectedCollections) && meta.selectedCollections.length > 0
  ) ? meta.selectedCollections.map(collectionGid => {
    return collectionGid.split('/').pop(); // Extract the collection ID from the GID
  }) : [];

  // Evaluate product and collection matching condition
  const isProductOrCollectionMatch =
  (meta.selectBy === "products" && (() => {
    const id = currentProduct?.id?.toString();
    const selectedProducts = Array.isArray(meta.selectedProducts) ? meta.selectedProducts : [];
    const match = selectedProducts.some(p => p.split("/").pop() === id);

    console.log("Product Match:", { id, selectedProducts, match });
    return match;
  })()) ||
  (meta.selectBy === "collections" && Array.isArray(currentCollections) && currentCollections.some(c => {
    const id = c.id.toString();
    const match = selectedCollectionIds.includes(id);

    console.log("Collection Match:", { id, selectedCollectionIds, match });
    return match;
  }));



  // Show maintenance modal first (priority)
  if (showPosition === "maintainance" && !maintainanceShown) {
    displayModal(meta);
    maintainanceShown = true;
    console.log("üì¢ Showing maintenance modal");

    return; // Exit loop after showing the "maintainance" modal
  }

  // Show sitewite modal if maintenance hasn't been shown and sitewite is available
  if (showPosition === "sitewite" && !maintainanceShown ) {
    console.log("üì¢ Showing sitewide modal");
    interceptedAction = "sitewite";
    displayModal(meta);
    return;
  }

  // Show close intent modal when the user is about to leave the page
  if (showPosition === "closeIntent" && planType === "pro" ) {
    
    document.addEventListener('mouseout', function (event) {
      // Check if the mouse is leaving the window
      if (event.relatedTarget === null && modal.style.display !== "flex") {
        console.log('Mouse has left the window or document area!');
        // Your custom logic here
        displayModal(meta);
      }
    });
    
    return;
  }
  

  // Show modal when user clicks "Add to Cart" button
if (showPosition === "addToCart" && isProductOrCollectionMatch) {
  const addBtn = document.querySelector('[name="add"]');
  const sessionData = JSON.parse(sessionStorage.getItem('acceptedProducts')) || { addToCart: [] };
  const productId = currentProduct?.id?.toString();

  if (!sessionData.addToCart.includes(productId)) {
    if (addBtn) {
      addBtn.addEventListener('click', function (e) {
        e.preventDefault();
        interceptedAction = "addToCart";
        displayModal(meta);
        console.log("üì¢ Showing add-to-cart modal");
      });
    }
  }
}

  // Show modal when product page is loaded
  if (showPosition === "productPage" && isProductOrCollectionMatch && planType === "pro") {
    displayModal(meta);
    console.log("üì¢ Showing product page modal");
  }

  // Show modal when Buy Now button is clicked
  if (showPosition === "buynow" && isProductOrCollectionMatch) {
    const checkoutSelectors = [
      'button[name="checkout"]',
      'input[name="checkout"]',
      'button[name="direct_checkout"]',
      'button[data-shopify-buy-now-button]',
      '.shopify-payment-button__button'
    ];

    checkoutSelectors.forEach(selector => {
      const btn = document.querySelector(selector);
      if (btn) {
        const clone = btn.cloneNode(true);
        btn.parentNode.replaceChild(clone, btn);
        clone.addEventListener('click', function (e) {
          e.preventDefault();
          interceptedAction = "checkout";
          displayModal(meta); // Display the modal when checkout is intercepted
          console.log("üì¢ Showing buy now modal");
        });
      }
    });
  }
});


function displayModal(meta) {
  console.log("üì¢ Displaying Modal for:", meta.title);

  const productId = currentProduct?.id?.toString();
  console.log("üîç Product ID:", productId);

  const watermark = document.getElementById("watermark");

if (meta.removeWatermark === "true" && planType == "pro") {
  console.log("‚úÖ Condition met for removing watermark");
  watermark.style.display = "none";
} else {
  console.log("‚ùå Condition NOT met. Watermark remains visible.");
}


  let sessionData = JSON.parse(sessionStorage.getItem('acceptedProducts')) || {
    addToCart: [],
    checkout: [],
    productPage: [],
    sitewide: false,
  };

  if (!Array.isArray(sessionData.addToCart)) sessionData.addToCart = [];
  if (!Array.isArray(sessionData.checkout)) sessionData.checkout = [];
  if (!Array.isArray(sessionData.productPage)) sessionData.productPage = [];

  console.log("üì¶ Session Data:", sessionData);

  const isAddToCartAccepted = sessionData.addToCart.includes(productId);
  const isCheckoutAccepted = sessionData.checkout.includes(productId);
  const isProductPageAccepted = sessionData.productPage.includes(productId);
  const isSitewideAccepted = sessionData.sitewide;

  console.log("‚úÖ Add to Cart Accepted:", isAddToCartAccepted);
  console.log("‚úÖ Checkout Accepted:", isCheckoutAccepted);
  console.log("‚úÖ Product Page Accepted:", isProductPageAccepted);
  console.log("‚úÖ Sitewide Accepted:", isSitewideAccepted);

  if (interceptedAction === "addToCart" && isAddToCartAccepted) {
 addToCartApi();
  
    return;
  }

  if (interceptedAction === "checkout" && isCheckoutAccepted) {
    console.log("üöÄ Checkout action triggered for accepted product.");
    window.location.href = "/checkout";
    return;
  }

  if (meta.showPosition === "productPage" && isProductPageAccepted) {
    console.log("‚úÖ Product page modal already accepted for product ID:", productId);
    return;
  }

  if (meta.showPosition === "sitewite" && isSitewideAccepted) {
    console.log("‚úÖ Sitewide modal already accepted.");
    return;
  }

  console.log("üü¢ Displaying Modal...", meta);
  console.log("Modal Display Before:", getComputedStyle(modal).display);

  modal.style.display = "flex";

  console.log("Modal Display After:", getComputedStyle(modal).display);


  document.getElementById('alertTitle').textContent = meta.title || "Notice";
  document.getElementById('alertDescription').textContent = meta.description || "";
  primaryBtn.textContent = meta.primaryText || "OK";
  secondaryBtn.textContent = meta.secondaryText || "Cancel";
  const modalImage = document.getElementById("alertImage");

  if (meta.image) {
    modalImage.src = meta.image;
    modalImage.style.display = "block";
  } else {
    modalImage.style.display = "none";
  }


  if (meta.showPosition === "maintainance") {
    console.log("üõ† Maintenance Modal - No Buttons");
    primaryBtn.style.display = "none";
    secondaryBtn.style.display = "none";
    return;
  }

  primaryBtn.onclick = () => {
    console.log("‚úÖ Primary Button Clicked");
    modal.style.display = "none";

    let sessionData = JSON.parse(sessionStorage.getItem('acceptedProducts')) || {
      addToCart: [],
      checkout: [],
      productPage: [],
      sitewide: false,
    };

    if (!Array.isArray(sessionData.addToCart)) sessionData.addToCart = [];
    if (!Array.isArray(sessionData.checkout)) sessionData.checkout = [];
    if (!Array.isArray(sessionData.productPage)) sessionData.productPage = [];

    if (interceptedAction === "addToCart") {
      if (!sessionData.addToCart.includes(productId)) {
        sessionData.addToCart.push(productId);
        console.log("üõí Added to AddToCart Session:", productId);
      }
    }

    if (interceptedAction === "checkout") {
      if (!sessionData.checkout.includes(productId)) {
        sessionData.checkout.push(productId);
        console.log("üõí Added to Checkout Session:", productId);
      }
    }

    if (meta.showPosition === "productPage") {
      if (!sessionData.productPage.includes(productId)) {
        sessionData.productPage.push(productId);
        console.log("üì¶ Added to ProductPage Session:", productId);
      }
    }

    if (meta.showPosition === "sitewite") {
      sessionData.sitewide = true;
      console.log("üåê Sitewide Accepted");
    }

    sessionStorage.setItem('acceptedProducts', JSON.stringify(sessionData));

    if (interceptedAction === "addToCart") {
   addToCartApi();
    }

    if (interceptedAction === "checkout") {
      window.location.href = "/checkout";
    }
  };

  secondaryBtn.onclick = () => {
    console.log("üö´ Secondary Button Clicked");
    modal.style.display = "none";
    if (meta.showPosition === "productPage") {
      window.location.href = "/";
    }
    if (meta.showPosition === "sitewite") {
      window.location.reload();
    }
  };
}

  }
</script>







{% schema %}
{
  "name": "Popup & Disclaimer",
  "target": "body",
  "stylesheet": "styles.css",
  
  "settings": [
    {
      "type": "color",
      "id": "title_text_color",
      "label": "Title Text Color",
      "default": "#007acc"
    },
    {
      "type": "color",
      "id": "description_text_color",
      "label": "Description Text Color",
      "default": "#555555"
    },
    {
      "type": "color",
      "id": "primary_button_color",
      "label": "Primary Button Color",
      "default": "#007acc"
    },
    {
      "type": "color",
      "id": "secondary_button_color",
      "label": "Secondary Button Color",
      "default": "#e0e0e0"
    },
      {
    "type": "color",
    "id": "primary_button_text_color",
    "label": "Primary Button Text Color",
    "default": "#ffffff"
  },
  {
    "type": "color",
    "id": "secondary_button_text_color",
    "label": "Secondary Button Text Color",
    "default": "#000000"
  }
  ]
}
{% endschema %}

